{"version":3,"file":"angular-indexed-db.min.js","sources":["angular-indexed-db.js"],"names":["IDBKeyRange","indexedDB","__slice","slice","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","mozIDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","angular","module","provider","apiDirection","applyNeededUpgrades","cursorDirection","db","dbMode","dbName","dbPromise","dbVersion","defaultQueryOptions","errorMessageFor","readyState","upgradesByVersion","readonly","readwrite","pending","next","nextunique","prev","prevunique","ascending","descending","useIndex","keyRange","direction","oldVersion","event","tx","version","hasOwnProperty","console","debug","this","e","target","webkitErrorMessage","error","message","errorCode","connection","databaseName","upgradeDatabase","newVersion","callback","Math","max","apply","Object","keys","$get","$q","$rootScope","$timeout","DbQ","ObjectStore","Transaction","closeDatabase","createDatabaseConnection","keyRangeForOptions","openDatabase","openTransaction","rejectWithError","validateStoreNames","deferred","$apply","reject","dbReq","defer","open","onsuccess","result","resolve","onblocked","onerror","onupgradeneeded","transaction","name","promise","then","close","storeNames","objectStoreNames","contains","mode","options","beginKey","endKey","bound","resultValues","setupCallbacks","prototype","oncomplete","_this","onabort","objectStore","storeName","abort","q","args","arguments","length","call","_ref","rejectWith","req","notify","notifyWith","onnotify","log","dbErrorFunction","resolveWith","store","_mapCursor","mapFunc","results","openCursor","cursor","push","_arrayOperation","data","item","_i","_len","isArray","getAllKeys","key","clear","upsert","put","insert","add","getAll","value","each","eachBy","indexName","index","count","find","get","findBy","openStore","callBack","deleteDatabase","queryDirection","databaseInfo","Array","stores","_results","keyPath","autoIncrement","indices","indexNames","objectStores"],"mappings":"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","sourcesContent":["\n/**\n @license $indexedDBProvider\n (c) 2014 Bram Whillock (bramski)\n Forked from original work by clements Capitan (webcss)\n License: MIT\n */\n\n(function() {\n  'use strict';\n  var IDBKeyRange, indexedDB,\n    __slice = [].slice;\n\n  indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n\n  IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n\n  angular.module('indexedDB', []).provider('$indexedDB', function() {\n    var apiDirection, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, readyState, upgradesByVersion;\n    dbMode = {\n      readonly: \"readonly\",\n      readwrite: \"readwrite\"\n    };\n    readyState = {\n      pending: \"pending\"\n    };\n    cursorDirection = {\n      next: \"next\",\n      nextunique: \"nextunique\",\n      prev: \"prev\",\n      prevunique: \"prevunique\"\n    };\n    apiDirection = {\n      ascending: cursorDirection.next,\n      descending: cursorDirection.prev\n    };\n    dbName = '';\n    dbVersion = 1;\n    db = null;\n    upgradesByVersion = {};\n    dbPromise = null;\n    defaultQueryOptions = {\n      useIndex: void 0,\n      keyRange: null,\n      direction: cursorDirection.next\n    };\n    applyNeededUpgrades = (function(_this) {\n      return function(oldVersion, event, db, tx) {\n        var version;\n        for (version in upgradesByVersion) {\n          if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {\n            continue;\n          }\n          console.debug(\"$indexedDB: Running upgrade : \" + version + \" from \" + oldVersion);\n          upgradesByVersion[version](event, db, tx);\n        }\n      };\n    })(this);\n    errorMessageFor = function(e) {\n      if (e.target.readyState === readyState.pending) {\n        return \"Error: Operation pending\";\n      } else {\n        return e.target.webkitErrorMessage || e.target.error.message || e.target.errorCode;\n      }\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.connection\n    @function\n    \n    @description\n    sets the name of the database to use\n    \n    @param {string} databaseName database name.\n    @returns {object} this\n     */\n    this.connection = function(databaseName) {\n      dbName = databaseName;\n      return this;\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.upgradeDatabase\n    @function\n    \n    @description provides version number and steps to upgrade the database wrapped in a\n    callback function\n    \n    @param {number} newVersion new version number for the database.\n    @param {function} callback the callback which proceeds the upgrade\n    @returns {object} this\n     */\n    this.upgradeDatabase = function(newVersion, callback) {\n      upgradesByVersion[newVersion] = callback;\n      dbVersion = Math.max.apply(null, Object.keys(upgradesByVersion));\n      return this;\n    };\n    this.$get = [\n      '$q', '$rootScope', '$timeout', function($q, $rootScope, $timeout) {\n        var DbQ, ObjectStore, Transaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;\n        rejectWithError = function(deferred) {\n          return function(error) {\n            return $rootScope.$apply(function() {\n              return deferred.reject(errorMessageFor(error));\n            });\n          };\n        };\n        createDatabaseConnection = function() {\n          var dbReq, deferred;\n          deferred = $q.defer();\n          dbReq = indexedDB.open(dbName, dbVersion || 1);\n          dbReq.onsuccess = function() {\n            db = dbReq.result;\n            $rootScope.$apply(function() {\n              deferred.resolve(db);\n            });\n          };\n          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);\n          dbReq.onupgradeneeded = function(event) {\n            var tx;\n            db = event.target.result;\n            tx = event.target.transaction;\n            console.debug(\"$indexedDB: Upgrading database '\" + db.name + \"' from version \" + event.oldVersion + \" to version \" + event.newVersion + \" ...\");\n            applyNeededUpgrades(event.oldVersion, event, db, tx);\n          };\n          return deferred.promise;\n        };\n        openDatabase = function() {\n          return dbPromise || (dbPromise = createDatabaseConnection());\n        };\n        closeDatabase = function() {\n          return openDatabase().then(function() {\n            db.close();\n            db = null;\n            return dbPromise = null;\n          });\n        };\n        validateStoreNames = function(storeNames) {\n          return db.objectStoreNames.contains(storeNames);\n        };\n        openTransaction = function(storeNames, mode) {\n          if (mode == null) {\n            mode = dbMode.readonly;\n          }\n          return openDatabase().then(function() {\n            if (!validateStoreNames(storeNames)) {\n              return $q.reject(\"Object stores \" + storeNames + \" do not exist.\");\n            }\n            return new Transaction(storeNames, mode);\n          });\n        };\n        keyRangeForOptions = function(options) {\n          if (options.beginKey && options.endKey) {\n            return IDBKeyRange.bound(options.beginKey, options.endKey);\n          }\n        };\n        Transaction = (function() {\n          function Transaction(storeNames, mode) {\n            if (mode == null) {\n              mode = dbMode.readonly;\n            }\n            this.transaction = db.transaction(storeNames, mode);\n            this.defer = $q.defer();\n            this.promise = this.defer.promise;\n            this.resultValues = [];\n            this.setupCallbacks();\n          }\n\n          Transaction.prototype.setupCallbacks = function() {\n            this.transaction.oncomplete = (function(_this) {\n              return function() {\n                return $rootScope.$apply(function() {\n                  return _this.defer.resolve(\"Transaction Completed\");\n                });\n              };\n            })(this);\n            this.transaction.onabort = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Aborted\", error);\n                });\n              };\n            })(this);\n            return this.transaction.onerror = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Error\", error);\n                });\n              };\n            })(this);\n          };\n\n          Transaction.prototype.objectStore = function(storeName) {\n            return this.transaction.objectStore(storeName);\n          };\n\n          Transaction.prototype.abort = function() {\n            return this.transaction.abort();\n          };\n\n          return Transaction;\n\n        })();\n        DbQ = (function() {\n          function DbQ() {\n            this.q = $q.defer();\n            this.promise = this.q.promise;\n          }\n\n          DbQ.prototype.reject = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).reject.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.rejectWith = function(req) {\n            return req.onerror = req.onblocked = (function(_this) {\n              return function(e) {\n                return _this.reject(errorMessageFor(e));\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolve = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).resolve.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notify = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).notify.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notifyWith = function(req) {\n            return req.onnotify = (function(_this) {\n              return function(e) {\n                console.log(\"notify\", e);\n                return _this.notify(e.target.result);\n              };\n            })(this);\n          };\n\n          DbQ.prototype.dbErrorFunction = function() {\n            return (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.q.reject(errorMessageFor(error));\n                });\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolveWith = function(req) {\n            this.notifyWith(req);\n            this.rejectWith(req);\n            return req.onsuccess = (function(_this) {\n              return function(e) {\n                return _this.resolve(e.target.result);\n              };\n            })(this);\n          };\n\n          return DbQ;\n\n        })();\n        ObjectStore = (function() {\n          function ObjectStore(storeName, transaction) {\n            this.storeName = storeName;\n            this.store = transaction.objectStore(storeName);\n            this.transaction = transaction;\n          }\n\n          ObjectStore.prototype.defer = function() {\n            return new DbQ();\n          };\n\n          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {\n            var results;\n            if (req == null) {\n              req = this.store.openCursor();\n            }\n            results = [];\n            defer.rejectWith(req);\n            return req.onsuccess = function(e) {\n              var cursor;\n              if (cursor = e.target.result) {\n                results.push(mapFunc(cursor));\n                defer.notify(mapFunc(cursor));\n                return cursor[\"continue\"]();\n              } else {\n                return defer.resolve(results);\n              }\n            };\n          };\n\n          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {\n            var defer, item, req, results, _i, _len;\n            defer = this.defer();\n            if (!angular.isArray(data)) {\n              data = [data];\n            }\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              item = data[_i];\n              req = mapFunc(item);\n              results = [];\n              defer.notifyWith(req);\n              defer.rejectWith(req);\n              req.onsuccess = function(e) {\n                results.push(e.target.result);\n                if (results.length >= data.length) {\n                  return defer.resolve(results);\n                }\n              };\n            }\n            if (data.length === 0) {\n              $timeout(function() {\n                return defer.resolve([]);\n              }, 0);\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAllKeys\n            @function\n          \n            @description\n            gets all the keys\n          \n            @returns {Q} A promise which will result with all the keys\n           */\n\n          ObjectStore.prototype.getAllKeys = function() {\n            var defer, req;\n            defer = this.defer();\n            if (this.store.getAllKeys) {\n              req = this.store.getAllKeys();\n              defer.resolveWith(req);\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.key;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.clear\n            @function\n          \n            @description\n            clears all objects from this store\n          \n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.clear = function() {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.clear();\n            defer.resolveWith(req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.delete\n            @function\n          \n            @description\n            Deletes the item at the key.  The operation is ignored if the item does not exist.\n          \n            @param {key} The key of the object to delete.\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype[\"delete\"] = function(key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store[\"delete\"](key));\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.upsert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to update or insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.upsert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.put(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.insert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.insert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.add(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAll\n            @function\n          \n            @description\n            Fetches all items from the store\n          \n            @returns {Q} A promise which resolves with copies of all items in the store\n           */\n\n          ObjectStore.prototype.getAll = function() {\n            var defer;\n            defer = this.defer();\n            if (this.store.getAll) {\n              defer.resolveWith(this.store.getAll());\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.value;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.each\n            @function\n          \n            @description\n            Iterates through the items in the store\n          \n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.each = function(options) {\n            if (options == null) {\n              options = {};\n            }\n            return this.eachBy(void 0, options);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.eachBy\n            @function\n          \n            @description\n            Iterates through the items in the store using an index\n          \n            @param {indexName} name of the index to use instead of the primary\n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.eachBy = function(indexName, options) {\n            var defer, direction, keyRange, req;\n            if (indexName == null) {\n              indexName = void 0;\n            }\n            if (options == null) {\n              options = {};\n            }\n            keyRange = keyRangeForOptions(options);\n            direction = options.direction || defaultQueryOptions.direction;\n            defer = this.defer();\n            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);\n            this._mapCursor(defer, (function(cursor) {\n              return cursor.value;\n            }), req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.count\n            @function\n          \n            @description\n            Returns a count of the items in the store\n          \n            @returns {Q} A promise which resolves with the count of all the items in the store.\n           */\n\n          ObjectStore.prototype.count = function() {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.count());\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.find\n            @function\n          \n            @description\n            Fetches an item from the store\n          \n            @returns {Q} A promise which resolves with the item from the store\n           */\n\n          ObjectStore.prototype.find = function(key) {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.get(key);\n            defer.rejectWith(req);\n            req.onsuccess = (function(_this) {\n              return function(e) {\n                if (e.target.result) {\n                  return defer.resolve(e.target.result);\n                } else {\n                  return defer.reject(\"\" + _this.storeName + \":\" + key + \" not found.\");\n                }\n              };\n            })(this);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.findBy\n            @function\n          \n            @description\n            Fetches an item from the store using a named index.\n          \n            @returns {Q} A promise which resolves with the item from the store.\n           */\n\n          ObjectStore.prototype.findBy = function(index, key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.index(index).get(key));\n            return defer.promise;\n          };\n\n          return ObjectStore;\n\n        })();\n        return {\n\n          /**\n          @ngdoc method\n          @name $indexedDB.objectStore\n          @function\n          \n          @description an IDBObjectStore to use\n          \n          @params {string} storeName the name of the objectstore to use\n          @returns {object} ObjectStore\n           */\n          openStore: function(storeName, callBack, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction([storeName], mode).then(function(transaction) {\n              callBack(new ObjectStore(storeName, transaction));\n              return transaction.promise;\n            });\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.closeDatabase\n            @function\n          \n            @description Closes the database for use and completes all transactions.\n           */\n          closeDatabase: function() {\n            return closeDatabase();\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.deleteDatabase\n            @function\n          \n            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.\n           */\n          deleteDatabase: function() {\n            return closeDatabase().then(function() {\n              var defer;\n              defer = new DbQ();\n              defer.resolveWith(indexedDB.deleteDatabase(dbName));\n              return defer.promise;\n            })[\"finally\"](function() {\n              return console.debug(\"$indexedDB: \" + dbName + \" database deleted.\");\n            });\n          },\n          queryDirection: apiDirection,\n\n          /**\n            @ngdoc method\n            @name $indexedDB.databaseInfo\n            @function\n          \n            @description Returns information about this database.\n           */\n          databaseInfo: function() {\n            return openDatabase().then(function() {\n              var storeNames, transaction;\n              transaction = null;\n              storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {\n                var store, storeName, stores;\n                stores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    store = transaction.objectStore(storeName);\n                    _results.push({\n                      name: storeName,\n                      keyPath: store.keyPath,\n                      autoIncrement: store.autoIncrement,\n                      indices: Array.prototype.slice.apply(store.indexNames)\n                    });\n                  }\n                  return _results;\n                })();\n                return transaction.promise.then(function() {\n                  return {\n                    name: db.name,\n                    version: db.version,\n                    objectStores: stores\n                  };\n                });\n              });\n            });\n          }\n        };\n      }\n    ];\n  });\n\n}).call(this);\n\n//# sourceMappingURL=angular-indexed-db.js.map\n"]}