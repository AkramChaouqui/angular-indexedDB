{"version":3,"file":"angular-indexed-db.min.js","sources":["angular-indexed-db.js"],"names":["IDBKeyRange","indexedDB","__slice","slice","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","mozIDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","angular","module","provider","allTransactions","apiDirection","applyNeededUpgrades","cursorDirection","db","dbMode","dbName","dbPromise","dbVersion","defaultQueryOptions","errorMessageFor","readyState","upgradesByVersion","readonly","readwrite","pending","next","nextunique","prev","prevunique","ascending","descending","useIndex","keyRange","direction","oldVersion","event","tx","version","hasOwnProperty","console","debug","e","target","webkitErrorMessage","error","message","errorCode","this","connection","databaseName","upgradeDatabase","newVersion","callback","Math","max","apply","Object","keys","$get","$q","$rootScope","DbQ","ObjectStore","Query","Transaction","addTransaction","closeDatabase","createDatabaseConnection","keyRangeForOptions","openDatabase","openTransaction","rejectWithError","validateStoreNames","deferred","$apply","reject","dbReq","defer","open","onsuccess","result","resolve","onblocked","onerror","onupgradeneeded","transaction","name","promise","then","close","storeNames","objectStoreNames","contains","mode","options","beginKey","endKey","bound","push","index","indexOf","splice","setupCallbacks","prototype","oncomplete","_this","onabort","objectStore","storeName","abort","q","args","arguments","length","call","_ref","rejectWith","req","notify","dbErrorFunction","resolveWith","store","_mapCursor","mapFunc","results","openCursor","cursor","_arrayOperation","data","item","_i","_len","isArray","when","getAllKeys","key","clear","upsert","put","insert","add","getAll","value","eachWhere","query","indexName","findWhere","each","eachBy","count","find","get","findBy","$lt","upperBound","$gt","lowerBound","$lte","$gte","$eq","only","$between","low","hi","exLow","exHi","$desc","unique","$asc","$index","openStore","callBack","openStores","objectStores","_results","openAllStores","Array","deleteDatabase","queryDirection","flush","all","databaseInfo","stores","keyPath","autoIncrement","indices","indexNames"],"mappings":"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","sourcesContent":["\n/**\n @license $indexedDBProvider\n (c) 2014 Bram Whillock (bramski)\n Forked from original work by clements Capitan (webcss)\n License: MIT\n */\n\n(function() {\n  'use strict';\n  var IDBKeyRange, indexedDB,\n    __slice = [].slice;\n\n  indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n\n  IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n\n  angular.module('indexedDB', []).provider('$indexedDB', function() {\n    var allTransactions, apiDirection, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, readyState, upgradesByVersion;\n    dbMode = {\n      readonly: \"readonly\",\n      readwrite: \"readwrite\"\n    };\n    readyState = {\n      pending: \"pending\"\n    };\n    cursorDirection = {\n      next: \"next\",\n      nextunique: \"nextunique\",\n      prev: \"prev\",\n      prevunique: \"prevunique\"\n    };\n    apiDirection = {\n      ascending: cursorDirection.next,\n      descending: cursorDirection.prev\n    };\n    dbName = '';\n    dbVersion = 1;\n    db = null;\n    upgradesByVersion = {};\n    dbPromise = null;\n    allTransactions = [];\n    defaultQueryOptions = {\n      useIndex: void 0,\n      keyRange: null,\n      direction: cursorDirection.next\n    };\n    applyNeededUpgrades = function(oldVersion, event, db, tx) {\n      var version;\n      for (version in upgradesByVersion) {\n        if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {\n          continue;\n        }\n        console.debug(\"$indexedDB: Running upgrade : \" + version + \" from \" + oldVersion);\n        upgradesByVersion[version](event, db, tx);\n      }\n    };\n    errorMessageFor = function(e) {\n      if (e.target.readyState === readyState.pending) {\n        return \"Error: Operation pending\";\n      } else {\n        return e.target.webkitErrorMessage || e.target.error.message || e.target.errorCode;\n      }\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.connection\n    @function\n    \n    @description\n    sets the name of the database to use\n    \n    @param {string} databaseName database name.\n    @returns {object} this\n     */\n    this.connection = function(databaseName) {\n      dbName = databaseName;\n      return this;\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.upgradeDatabase\n    @function\n    \n    @description provides version number and steps to upgrade the database wrapped in a\n    callback function\n    \n    @param {number} newVersion new version number for the database.\n    @param {function} callback the callback which proceeds the upgrade\n    @returns {object} this\n     */\n    this.upgradeDatabase = function(newVersion, callback) {\n      upgradesByVersion[newVersion] = callback;\n      dbVersion = Math.max.apply(null, Object.keys(upgradesByVersion));\n      return this;\n    };\n    this.$get = [\n      '$q', '$rootScope', function($q, $rootScope) {\n        var DbQ, ObjectStore, Query, Transaction, addTransaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;\n        rejectWithError = function(deferred) {\n          return function(error) {\n            return $rootScope.$apply(function() {\n              return deferred.reject(errorMessageFor(error));\n            });\n          };\n        };\n        createDatabaseConnection = function() {\n          var dbReq, deferred;\n          deferred = $q.defer();\n          dbReq = indexedDB.open(dbName, dbVersion || 1);\n          dbReq.onsuccess = function() {\n            db = dbReq.result;\n            $rootScope.$apply(function() {\n              deferred.resolve(db);\n            });\n          };\n          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);\n          dbReq.onupgradeneeded = function(event) {\n            var tx;\n            db = event.target.result;\n            tx = event.target.transaction;\n            console.debug(\"$indexedDB: Upgrading database '\" + db.name + \"' from version \" + event.oldVersion + \" to version \" + event.newVersion + \" ...\");\n            applyNeededUpgrades(event.oldVersion, event, db, tx);\n          };\n          return deferred.promise;\n        };\n        openDatabase = function() {\n          return dbPromise || (dbPromise = createDatabaseConnection());\n        };\n        closeDatabase = function() {\n          return openDatabase().then(function() {\n            db.close();\n            db = null;\n            return dbPromise = null;\n          });\n        };\n        validateStoreNames = function(storeNames) {\n          return db.objectStoreNames.contains(storeNames);\n        };\n        openTransaction = function(storeNames, mode) {\n          if (mode == null) {\n            mode = dbMode.readonly;\n          }\n          return openDatabase().then(function() {\n            if (!validateStoreNames(storeNames)) {\n              return $q.reject(\"Object stores \" + storeNames + \" do not exist.\");\n            }\n            return new Transaction(storeNames, mode);\n          });\n        };\n        keyRangeForOptions = function(options) {\n          if (options.beginKey && options.endKey) {\n            return IDBKeyRange.bound(options.beginKey, options.endKey);\n          }\n        };\n        addTransaction = function(transaction) {\n          allTransactions.push(transaction.promise);\n          return transaction.promise[\"finally\"](function() {\n            var index;\n            index = allTransactions.indexOf(transaction.promise);\n            if (index > -1) {\n              return allTransactions.splice(index, 1);\n            }\n          });\n        };\n        Transaction = (function() {\n          function Transaction(storeNames, mode) {\n            if (mode == null) {\n              mode = dbMode.readonly;\n            }\n            this.transaction = db.transaction(storeNames, mode);\n            this.defer = $q.defer();\n            this.promise = this.defer.promise;\n            this.setupCallbacks();\n          }\n\n          Transaction.prototype.setupCallbacks = function() {\n            this.transaction.oncomplete = (function(_this) {\n              return function() {\n                return $rootScope.$apply(function() {\n                  return _this.defer.resolve(\"Transaction Completed\");\n                });\n              };\n            })(this);\n            this.transaction.onabort = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Aborted\", error);\n                });\n              };\n            })(this);\n            this.transaction.onerror = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Error\", error);\n                });\n              };\n            })(this);\n            return addTransaction(this);\n          };\n\n          Transaction.prototype.objectStore = function(storeName) {\n            return this.transaction.objectStore(storeName);\n          };\n\n          Transaction.prototype.abort = function() {\n            return this.transaction.abort();\n          };\n\n          return Transaction;\n\n        })();\n        DbQ = (function() {\n          function DbQ() {\n            this.q = $q.defer();\n            this.promise = this.q.promise;\n          }\n\n          DbQ.prototype.reject = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).reject.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.rejectWith = function(req) {\n            return req.onerror = req.onblocked = (function(_this) {\n              return function(e) {\n                return _this.reject(errorMessageFor(e));\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolve = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).resolve.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notify = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).notify.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.dbErrorFunction = function() {\n            return (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.q.reject(errorMessageFor(error));\n                });\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolveWith = function(req) {\n            this.rejectWith(req);\n            return req.onsuccess = (function(_this) {\n              return function(e) {\n                return _this.resolve(e.target.result);\n              };\n            })(this);\n          };\n\n          return DbQ;\n\n        })();\n        ObjectStore = (function() {\n          function ObjectStore(storeName, transaction) {\n            this.storeName = storeName;\n            this.store = transaction.objectStore(storeName);\n            this.transaction = transaction;\n          }\n\n          ObjectStore.prototype.defer = function() {\n            return new DbQ();\n          };\n\n          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {\n            var results;\n            if (req == null) {\n              req = this.store.openCursor();\n            }\n            results = [];\n            defer.rejectWith(req);\n            return req.onsuccess = function(e) {\n              var cursor;\n              if (cursor = e.target.result) {\n                results.push(mapFunc(cursor));\n                defer.notify(mapFunc(cursor));\n                return cursor[\"continue\"]();\n              } else {\n                return defer.resolve(results);\n              }\n            };\n          };\n\n          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {\n            var defer, item, req, results, _i, _len;\n            defer = this.defer();\n            if (!angular.isArray(data)) {\n              data = [data];\n            }\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              item = data[_i];\n              req = mapFunc(item);\n              results = [];\n              defer.rejectWith(req);\n              req.onsuccess = function(e) {\n                results.push(e.target.result);\n                defer.notify(e.target.result);\n                if (results.length >= data.length) {\n                  return defer.resolve(results);\n                }\n              };\n            }\n            if (data.length === 0) {\n              return $q.when([]);\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAllKeys\n            @function\n          \n            @description\n            gets all the keys\n          \n            @returns {Q} A promise which will result with all the keys\n           */\n\n          ObjectStore.prototype.getAllKeys = function() {\n            var defer, req;\n            defer = this.defer();\n            if (this.store.getAllKeys) {\n              req = this.store.getAllKeys();\n              defer.resolveWith(req);\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.key;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.clear\n            @function\n          \n            @description\n            clears all objects from this store\n          \n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.clear = function() {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.clear();\n            defer.resolveWith(req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.delete\n            @function\n          \n            @description\n            Deletes the item at the key.  The operation is ignored if the item does not exist.\n          \n            @param {key} The key of the object to delete.\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype[\"delete\"] = function(key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store[\"delete\"](key));\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.upsert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to update or insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.upsert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.put(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.insert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.insert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.add(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAll\n            @function\n          \n            @description\n            Fetches all items from the store\n          \n            @returns {Q} A promise which resolves with copies of all items in the store\n           */\n\n          ObjectStore.prototype.getAll = function() {\n            var defer;\n            defer = this.defer();\n            if (this.store.getAll) {\n              defer.resolveWith(this.store.getAll());\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.value;\n              });\n            }\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.eachWhere = function(query) {\n            var defer, direction, indexName, keyRange, req;\n            defer = this.defer();\n            indexName = query.indexName;\n            keyRange = query.keyRange;\n            direction = query.direction;\n            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);\n            this._mapCursor(defer, (function(cursor) {\n              return cursor.value;\n            }), req);\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.findWhere = function(query) {\n            return this.eachWhere(query);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.each\n            @function\n          \n            @description\n            Iterates through the items in the store\n          \n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.each = function(options) {\n            if (options == null) {\n              options = {};\n            }\n            return this.eachBy(void 0, options);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.eachBy\n            @function\n          \n            @description\n            Iterates through the items in the store using an index\n          \n            @param {indexName} name of the index to use instead of the primary\n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.eachBy = function(indexName, options) {\n            var q;\n            if (indexName == null) {\n              indexName = void 0;\n            }\n            if (options == null) {\n              options = {};\n            }\n            q = new Query();\n            q.indexName = indexName;\n            q.keyRange = keyRangeForOptions(options);\n            q.direction = options.direction || defaultQueryOptions.direction;\n            return this.eachWhere(q);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.count\n            @function\n          \n            @description\n            Returns a count of the items in the store\n          \n            @returns {Q} A promise which resolves with the count of all the items in the store.\n           */\n\n          ObjectStore.prototype.count = function() {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.count());\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.find\n            @function\n          \n            @description\n            Fetches an item from the store\n          \n            @returns {Q} A promise which resolves with the item from the store\n           */\n\n          ObjectStore.prototype.find = function(key) {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.get(key);\n            defer.rejectWith(req);\n            req.onsuccess = (function(_this) {\n              return function(e) {\n                if (e.target.result) {\n                  return defer.resolve(e.target.result);\n                } else {\n                  return defer.reject(\"\" + _this.storeName + \":\" + key + \" not found.\");\n                }\n              };\n            })(this);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.findBy\n            @function\n          \n            @description\n            Fetches an item from the store using a named index.\n          \n            @returns {Q} A promise which resolves with the item from the store.\n           */\n\n          ObjectStore.prototype.findBy = function(index, key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.index(index).get(key));\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.query = function() {\n            return new Query();\n          };\n\n          return ObjectStore;\n\n        })();\n        Query = (function() {\n          function Query() {\n            this.indexName = void 0;\n            this.keyRange = void 0;\n            this.direction = cursorDirection.next;\n          }\n\n          Query.prototype.$lt = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$gt = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$lte = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value);\n            return this;\n          };\n\n          Query.prototype.$gte = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value);\n            return this;\n          };\n\n          Query.prototype.$eq = function(value) {\n            this.keyRange = IDBKeyRange.only(value);\n            return this;\n          };\n\n          Query.prototype.$between = function(low, hi, exLow, exHi) {\n            if (exLow == null) {\n              exLow = false;\n            }\n            if (exHi == null) {\n              exHi = false;\n            }\n            this.keyRange = IDBKeyRange.bound(low, hi, exLow, exHi);\n            return this;\n          };\n\n          Query.prototype.$desc = function(unique) {\n            this.direction = unique ? cursorDirection.prevunique : cursorDirection.prev;\n            return this;\n          };\n\n          Query.prototype.$asc = function(unique) {\n            this.direction = unique ? cursorDirection.nextunique : cursorDirection.next;\n            return this;\n          };\n\n          Query.prototype.$index = function(indexName) {\n            this.indexName = indexName;\n            return this;\n          };\n\n          return Query;\n\n        })();\n        return {\n\n          /**\n          @ngdoc method\n          @name $indexedDB.objectStore\n          @function\n          \n          @description an IDBObjectStore to use\n          \n          @params {string} storeName the name of the objectstore to use\n          @returns {object} ObjectStore\n           */\n          openStore: function(storeName, callBack, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction([storeName], mode).then(function(transaction) {\n              var results;\n              results = callBack(new ObjectStore(storeName, transaction));\n              return transaction.promise.then(function() {\n                return results;\n              });\n            });\n          },\n          openStores: function(storeNames, callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction(storeNames, mode).then(function(transaction) {\n              var objectStores, results, storeName;\n              objectStores = (function() {\n                var _i, _len, _results;\n                _results = [];\n                for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                  storeName = storeNames[_i];\n                  _results.push(new ObjectStore(storeName, transaction));\n                }\n                return _results;\n              })();\n              results = callback.apply(null, objectStores);\n              return transaction.promise.then(function() {\n                return results;\n              });\n            });\n          },\n          openAllStores: function(callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openDatabase().then((function(_this) {\n              return function() {\n                var objectStores, results, storeName, storeNames, transaction;\n                storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n                transaction = new Transaction(storeNames, mode);\n                objectStores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    _results.push(new ObjectStore(storeName, transaction));\n                  }\n                  return _results;\n                })();\n                results = callback.apply(null, objectStores);\n                return transaction.promise.then(function() {\n                  return results;\n                });\n              };\n            })(this));\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.closeDatabase\n            @function\n          \n            @description Closes the database for use and completes all transactions.\n           */\n          closeDatabase: function() {\n            return closeDatabase();\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.deleteDatabase\n            @function\n          \n            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.\n           */\n          deleteDatabase: function() {\n            return closeDatabase().then(function() {\n              var defer;\n              defer = new DbQ();\n              defer.resolveWith(indexedDB.deleteDatabase(dbName));\n              return defer.promise;\n            })[\"finally\"](function() {\n              return console.debug(\"$indexedDB: \" + dbName + \" database deleted.\");\n            });\n          },\n          queryDirection: apiDirection,\n          flush: function() {\n            if (allTransactions.length > 0) {\n              return $q.all(allTransactions);\n            } else {\n              return $q.when([]);\n            }\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.databaseInfo\n            @function\n          \n            @description Returns information about this database.\n           */\n          databaseInfo: function() {\n            return openDatabase().then(function() {\n              var storeNames, transaction;\n              transaction = null;\n              storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {\n                var store, storeName, stores;\n                stores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    store = transaction.objectStore(storeName);\n                    _results.push({\n                      name: storeName,\n                      keyPath: store.keyPath,\n                      autoIncrement: store.autoIncrement,\n                      indices: Array.prototype.slice.apply(store.indexNames)\n                    });\n                  }\n                  return _results;\n                })();\n                return transaction.promise.then(function() {\n                  return {\n                    name: db.name,\n                    version: db.version,\n                    objectStores: stores\n                  };\n                });\n              });\n            });\n          }\n        };\n      }\n    ];\n  });\n\n}).call(this);\n\n//# sourceMappingURL=angular-indexed-db.js.map\n"]}